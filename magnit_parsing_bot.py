import csv

from bot_data import token

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold, hlink
import time
from main import getData

bot = Bot(token=token,parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

goodsList = []
count = 0

@dp.message_handler(commands='start')
async def start(message: types.Message):
    start_buttons = ['–ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–∏–¥–∫–∏']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)

    await message.answer('–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –∏—â–µ–º?', reply_markup=keyboard)

@dp.message_handler(Text(equals='–ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–∏–¥–∫–∏'))
async def get_discounts(message: types.Message):
    await message.answer('Please wait...')

    #getData()

    with open('data.csv', 'r', encoding='utf-8') as file:
        reader = csv.reader(file)

        global goodsList

        goodsList = []
        first = True
        for row in reader:
            if first:
                first = False
                continue

            if len(row) == 0:
                continue

            tempDict ={
                'Name':row[0],
                'OldPrice':row[1],
                'CurrentPrice':row[2],
                'DiscountPercent':row[3],
                'EndDate':row[4]
            }
            goodsList.append(tempDict)



    global count
    count = 0
    for item in goodsList:
        count += 1
        card = f'{item["Name"]}\n' \
               f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item["DiscountPercent"]}%\n' \
               f'{hbold("–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ")}‚ÇΩ{item["OldPrice"]}üî•\n' \
               f'{hbold("–ù–æ–≤–∞—è —Ü–µ–Ω–∞: ")}‚ÇΩ{item["CurrentPrice"]}üî•\n' \
               f'{hbold("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ")}{item["EndDate"]}üî•'

        if count == 10:
            start_buttons = ['–ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–∏–¥–∫–∏', '–î–∞–ª–µ–µ']
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(*start_buttons)
            await message.answer(card, reply_markup = keyboard)
            break

        await message.answer(card)




@dp.message_handler(Text(equals='–î–∞–ª–µ–µ'))
async def get_discounts(message: types.Message):
    global count

    for x in range(10):
        count += 1
        card = f'{goodsList[count]["Name"]}\n' \
               f'{hbold("–°–∫–∏–¥–∫–∞: ")}{goodsList[count]["DiscountPercent"]}%\n' \
               f'{hbold("–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: ")}${goodsList[count]["OldPrice"]}üî•' \
               f'{hbold("–ù–æ–≤–∞—è —Ü–µ–Ω–∞: ")}${goodsList[count]["CurrentPrice"]}üî•' \
               f'{hbold("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ")}${goodsList[count]["EndDate"]}üî•'
        await message.answer(card)

        if count == len(goodsList):
            start_buttons = ['–ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–∏–¥–∫–∏']
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            keyboard.add(*start_buttons)
            await message.answer("–°–∫–∏–¥–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å!", reply_markup = keyboard)


def main():
    executor.start_polling(dp)

if __name__ == '__main__':
    main()